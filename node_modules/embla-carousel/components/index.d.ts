import { Engine } from './Engine';
import { EventEmitterType } from './EventEmitter';
import { EmblaOptionsType } from './Options';
export declare type EmblaNodesType = {
    root: HTMLElement;
    container?: HTMLElement;
    slides?: HTMLElement[];
};
declare type EmblaPluginOptionsType = {
    [key: string]: unknown;
};
export declare type EmblaPluginType<OptionsType extends EmblaPluginOptionsType = EmblaPluginOptionsType> = {
    name: string;
    options: OptionsType;
    init: (embla: EmblaCarouselType) => void;
    destroy: () => void;
    [key: string]: unknown;
};
export declare type EmblaCarouselType = {
    canScrollNext: () => boolean;
    canScrollPrev: () => boolean;
    clickAllowed: () => boolean;
    containerNode: () => HTMLElement;
    internalEngine: () => Engine;
    destroy: () => void;
    off: EventEmitterType['off'];
    on: EventEmitterType['on'];
    previousScrollSnap: () => number;
    reInit: (options?: EmblaOptionsType, plugins?: EmblaPluginType[]) => void;
    rootNode: () => HTMLElement;
    scrollNext: (jump?: boolean) => void;
    scrollPrev: (jump?: boolean) => void;
    scrollProgress: () => number;
    scrollSnapList: () => number[];
    scrollTo: (index: number, jump?: boolean) => void;
    selectedScrollSnap: () => number;
    slideNodes: () => HTMLElement[];
    slidesInView: (target?: boolean) => number[];
    slidesNotInView: (target?: boolean) => number[];
};
declare function EmblaCarousel(nodes: HTMLElement | EmblaNodesType, userOptions?: EmblaOptionsType, userPlugins?: EmblaPluginType[]): EmblaCarouselType;
declare namespace EmblaCarousel {
    var globalOptions: Partial<import("./Options").OptionsType> | undefined;
}
export default EmblaCarousel;
